<?php

namespace app\modules\admin\models\search;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\modules\admin\models\Feedback;

/**
 * FeedbackSearch represents the model behind the search form of `app\modules\admin\models\Feedback`.
 */
class FeedbackSearch extends Feedback
{
    public $date_from;
    public $date_to;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'user_id', /*'date_to', 'date_from','date_add'*/], 'integer'],
            [['message', 'user.name', /*'date_add'*/], 'safe'],
            [['date_to', 'date_from'], 'date', 'format' => 'php:Y-m-d'],
        ];
    }

    public function attributes()
    {
        return array_merge(parent::attributes(), ['user.name', 'images', 'date_add',]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Feedback::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 5
            ],
            'sort' => [
                'defaultOrder' => [
                    'id' => SORT_DESC
                ]
            ],
        ]);
        $query->JoinWith(['user' => function ($query) {
            $query->from(['user' => 'users']);
        }]);
        $dataProvider->sort->attributes['user.name'] = [
            'asc' => ['user.name' => SORT_ASC],
            'desc' => ['user.name' => SORT_DESC],

        ];

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'user_id' => $this->user_id,
//            'date_add' => $this->date_add,
        ]);

        $query->andFilterWhere(['like', 'message', $this->message])
            ->andFilterWhere(['LIKE', 'user.name', $this->getAttribute('user.name')]);
//        $query->andFilterWhere(['>=', 'feedback.date_add', $this->date_from ? strtotime($this->date_from . ' 00:00:00') : null])
//            ->andFilterWhere(['<=','feedback.date_add',$this->date_to ? strtotime($this->date_to . ' 23:59:59') : null]);
//        if(isset($this->date_range) && $this->test != '')
//        {
//            $date_explode = explode(" - ", $this->date_range); // вся фишка тут, больше ничего сверъестественного
//            $date1 = trim($date_explode[0]);
//            $date2 = trim($date_explode[1]);
//            $query->andFilterWhere(['between', 'date_rge', $date1, $date2]);
//        }
//        $query->andFilterWhere(['>=','date_add', $this->date_from ? \Yii::$app->formatter->asDate($this->date_from, 'Y-MM-dd') : null])
//            ->andFilterWhere(['<=','date_add', $this->date_to ? \Yii::$app->formatter->asDate($this->date_to, 'Y-MM-dd') : null]);
        //Fieldrange
//        if (!empty($this->date_from) and !empty($this->date_to)) {
//            $query->andFilterWhere(['and',['>','date_add',$this->date_from],['<','date_add',$this->date_to]]);
//        }

        //newfieldrange работает, работает с DAtepicker, поле - дата пхп
        if (!empty($this->date_from) and !empty($this->date_to)){
        //$create = \Yii::$app->formatter->asDate($this->date_from, 'php:Y-m-d');
       //$update = \Yii::$app->formatter->asDate($this->date_to, 'php:Y-m-d');
        $query->andFilterWhere(['>=', 'feedback.date_add', $this->date_from])->andFilterWhere(['<=', 'feedback.date_add', $this->date_to]);
    }
//        var_dump($dataProvider->query->createCommand()->rawSql);
        return $dataProvider;
    }
}
